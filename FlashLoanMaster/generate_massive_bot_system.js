#!/usr/bin/env node
/**
 * Gerador Massivo de Bots IA Evolutivo
 * 
 * Este script gera um n√∫mero massivo de bots, estrat√©gias e otimiza√ß√µes
 * com execu√ß√£o real em produ√ß√£o para maximiza√ß√£o de lucros.
 */

const { 
  iniciarSistemaEvolutivo, 
  criarLoteBots, 
  criarLoteEstrategias, 
  criarLoteOtimizacoes 
} = require('./evo_bot_system_expanded');
const fs = require('fs');
const path = require('path');

// Configura√ß√µes para gera√ß√£o massiva
const CONFIG = {
  // Quantidades de componentes a serem gerados
  BOTS_POR_GERACAO: 1000,
  ESTRATEGIAS_POR_GERACAO: 100,
  OTIMIZACOES_POR_GERACAO: 50,
  
  // N√∫mero de gera√ß√µes (para escalabilidade)
  TOTAL_GERACOES: 500000, // Para 500 bilh√µes de bots (500000 √ó 1000)
  
  // Linguagens a serem utilizadas
  LINGUAGENS: ['js', 'py', 'sol'],
  
  // Intervalo entre gera√ß√µes (ms)
  INTERVALO_GERACAO: 30 * 60 * 1000, // 30 minutos
  
  // Controle de recursos
  MAX_GERACOES_POR_EXECUCAO: 10, // Limitar consumo de mem√≥ria
  LIMPAR_APOS_GERACAO: true,      // Limpar ap√≥s cada gera√ß√£o
  
  // Log e relat√≥rios
  LOG_DIR: path.join(__dirname, 'logs'),
  REPORT_DIR: path.join(__dirname, 'reports')
};

// Criar diret√≥rios necess√°rios
if (!fs.existsSync(CONFIG.LOG_DIR)) {
  fs.mkdirSync(CONFIG.LOG_DIR, { recursive: true });
}

if (!fs.existsSync(CONFIG.REPORT_DIR)) {
  fs.mkdirSync(CONFIG.REPORT_DIR, { recursive: true });
}

// Fun√ß√£o para registrar logs
function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
  
  console.log(logMessage);
  
  // Salvar no arquivo de log
  const logFile = path.join(CONFIG.LOG_DIR, `massive_generation_${new Date().toISOString().split('T')[0]}.log`);
  fs.appendFileSync(logFile, logMessage + '\n');
}

// Fun√ß√£o para gerar um relat√≥rio
function gerarRelatorio(geracao, resultados) {
  const timestamp = new Date().toISOString();
  const relatorio = {
    timestamp,
    geracao,
    bots: resultados.bots.length,
    estrategias: resultados.estrategias.length,
    otimizacoes: resultados.otimizacoes.length,
    totalGerado: geracao * CONFIG.BOTS_POR_GERACAO
  };
  
  // Salvar relat√≥rio
  const relatorioFile = path.join(CONFIG.REPORT_DIR, `relatorio_geracao_${geracao}.json`);
  fs.writeFileSync(relatorioFile, JSON.stringify(relatorio, null, 2));
  
  return relatorio;
}

// Fun√ß√£o principal para execu√ß√£o
async function executarGeracaoMassiva() {
  log('üöÄ Iniciando Gera√ß√£o Massiva de Bots IA Evolutivos...', 'start');
  
  log(`‚öôÔ∏è Configura√ß√£o:`);
  log(`   - Bots por gera√ß√£o: ${CONFIG.BOTS_POR_GERACAO}`);
  log(`   - Estrat√©gias por gera√ß√£o: ${CONFIG.ESTRATEGIAS_POR_GERACAO}`);
  log(`   - Otimiza√ß√µes por gera√ß√£o: ${CONFIG.OTIMIZACOES_POR_GERACAO}`);
  log(`   - Total de gera√ß√µes: ${CONFIG.TOTAL_GERACOES}`);
  log(`   - Meta: ${CONFIG.TOTAL_GERACOES * CONFIG.BOTS_POR_GERACAO} bots`);
  
  // Contadores
  let geracaoAtual = 0;
  let totalBotsGerados = 0;
  let geracoesNestaExecucao = 0;
  
  // Verificar se existe um estado anterior
  const estadoFile = path.join(CONFIG.REPORT_DIR, 'estado_geracao.json');
  if (fs.existsSync(estadoFile)) {
    try {
      const estadoAnterior = JSON.parse(fs.readFileSync(estadoFile, 'utf8'));
      geracaoAtual = estadoAnterior.ultimaGeracao || 0;
      totalBotsGerados = estadoAnterior.totalBotsGerados || 0;
      
      log(`üìã Estado anterior encontrado: Gera√ß√£o ${geracaoAtual}, ${totalBotsGerados} bots gerados`);
    } catch (error) {
      log(`‚ùå Erro ao ler estado anterior: ${error.message}`, 'error');
    }
  }
  
  // Fun√ß√£o para gerar uma gera√ß√£o
  async function gerarGeracao() {
    geracaoAtual++;
    geracoesNestaExecucao++;
    
    log(`üîÑ Iniciando gera√ß√£o #${geracaoAtual}...`);
    
    // Iniciar sistema evolutivo com configura√ß√£o espec√≠fica
    const resultados = iniciarSistemaEvolutivo({
      numBots: CONFIG.BOTS_POR_GERACAO,
      numEstrategias: CONFIG.ESTRATEGIAS_POR_GERACAO,
      numOtimizacoes: CONFIG.OTIMIZACOES_POR_GERACAO,
      linguagens: CONFIG.LINGUAGENS,
      limparExistentes: CONFIG.LIMPAR_APOS_GERACAO && geracoesNestaExecucao > 1
    });
    
    // Atualizar contadores
    totalBotsGerados += resultados.bots.length;
    
    // Gerar relat√≥rio
    const relatorio = gerarRelatorio(geracaoAtual, resultados);
    
    // Salvar estado
    const estado = {
      ultimaGeracao: geracaoAtual,
      totalBotsGerados,
      timestamp: new Date().toISOString()
    };
    
    fs.writeFileSync(estadoFile, JSON.stringify(estado, null, 2));
    
    log(`‚úÖ Gera√ß√£o #${geracaoAtual} conclu√≠da: ${resultados.bots.length} bots gerados`);
    log(`üìä Total acumulado: ${totalBotsGerados} bots (${(totalBotsGerados / (CONFIG.TOTAL_GERACOES * CONFIG.BOTS_POR_GERACAO) * 100).toFixed(8)}% da meta)`);
    
    // Verificar se atingiu o limite de gera√ß√µes por execu√ß√£o
    if (geracoesNestaExecucao >= CONFIG.MAX_GERACOES_POR_EXECUCAO) {
      log(`‚ö†Ô∏è Limite de gera√ß√µes por execu√ß√£o atingido (${CONFIG.MAX_GERACOES_POR_EXECUCAO})`);
      log('üíæ Estado salvo. Execute novamente para continuar a gera√ß√£o.');
      return false;
    }
    
    // Verificar se atingiu o total de gera√ß√µes
    if (geracaoAtual >= CONFIG.TOTAL_GERACOES) {
      log('üéâ Meta de gera√ß√µes atingida!');
      log(`üèÜ Total final: ${totalBotsGerados} bots gerados`);
      return false;
    }
    
    return true;
  }
  
  // Gerar primeira gera√ß√£o
  let continuar = await gerarGeracao();
  
  // Agendar pr√≥ximas gera√ß√µes
  if (continuar) {
    log(`‚è±Ô∏è Pr√≥xima gera√ß√£o em ${CONFIG.INTERVALO_GERACAO / 60000} minutos...`);
    
    const intervalo = setInterval(async () => {
      continuar = await gerarGeracao();
      
      if (!continuar) {
        clearInterval(intervalo);
        log('üëã Processo de gera√ß√£o massiva finalizado');
      } else {
        log(`‚è±Ô∏è Pr√≥xima gera√ß√£o em ${CONFIG.INTERVALO_GERACAO / 60000} minutos...`);
      }
    }, CONFIG.INTERVALO_GERACAO);
    
    // Tratar encerramento limpo
    process.on('SIGINT', () => {
      clearInterval(intervalo);
      log('‚ö†Ô∏è Processo interrompido pelo usu√°rio', 'warning');
      log('üíæ Estado salvo. Execute novamente para continuar a gera√ß√£o.');
      process.exit(0);
    });
  }
}

// Executar gera√ß√£o massiva
executarGeracaoMassiva().catch(error => {
  log(`‚ùå Erro fatal: ${error.message}`, 'error');
  console.error(error);
  process.exit(1);
});