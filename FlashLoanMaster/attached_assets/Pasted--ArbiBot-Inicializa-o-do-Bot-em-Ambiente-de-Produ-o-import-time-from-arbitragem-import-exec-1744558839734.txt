# ArbiBot - Inicializa√ß√£o do Bot em Ambiente de Produ√ß√£o

import time
from arbitragem import executar_arbitragem
desde mineracao import iniciar_mineracao
from defi import executar_staking, executar_yield_farming
from distribuicao import enviar_lucros
from flashloans import iniciar_flash_loans
from config import carregar_configuracoes_producao


# Inicializa√ß√£o principal em ambiente de produ√ß√£o

def iniciar_bot_producao(
    mineracao_multimoedas=True,
    hash_power="999999000000000000 TH/s",
    flash_loans_ativos=True,
    yield_farming=True,
    staking=True,
    trading_global=True,
    tokenizacao_defi=True,
    numero_max_transacoes_por_bloco=500,
    envio_lucros_automatico=True,
    intervalo_envio_lucros="30min",
    ambiente="producao",
    investimento_inicial=0,
    calcular_lucro_liquido_pos_custos=True
):
    print("[üîÅ] Iniciando ArbiBot em ambiente de produ√ß√£o...")

    config = carregar_configuracoes_producao()

    if mineracao_multimoedas:
        print(f"[‚õèÔ∏è] Iniciando minera√ß√£o multimoedas com hash de {hash_power}...")
        iniciar_mineracao(hash_power=hash_power)

    if flash_loans_ativos:
        print("[‚ö°] Flash Loans ativados...")
        iniciar_flash_loans()

    if staking:
        print("[üì•] Executando staking em todos os pools suportados...")
        executar_staking()

    if yield_farming:
        print("[üåæ] Yield farming ativado com estrat√©gias otimizadas...")
        executar_yield_farming()

    # Loop principal para arbitragem e minera√ß√£o
    while True:
        executar_arbitragem(
            limite_transacoes_bloco=numero_max_transacoes_por_bloco,
            calcular_lucro_liquido=calcular_lucro_liquido_pos_custos
        )

        if envio_lucros_automatico:
            print("[üì§] Verificando agendamento de envio de lucros...")
            enviar_lucros(intervalo=intervalo_envio_lucros)

        time.sleep(360)  # Verifica√ß√£o a cada 6 minutos (360 segundos)


if __name__ == "__main__":
    iniciar_bot_producao()